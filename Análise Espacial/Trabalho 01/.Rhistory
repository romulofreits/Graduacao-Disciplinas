#instalação de pacotes
install.packages("ggplot2")
#fazendo um gráfico de disperção
library(ggplot2) #carregar os pacotes
cars #conjunto de dados do r
ggplot(cars, aes(x = speed, y = dist))
ggplot(cars, aes(x = speed, y = dist)) + geom_point()
ggplot(cars, aes(x = speed, y = dist))+geom_point(col = "red")
ggplot(cars, aes(x = speed, y = dist))+geom_point(col = "red", size = 3)
ggplot(cars, aes(x = speed, y = dist))+
geom_point(col = "red", size = 3)+
theme_bw()
ggplot(cars, aes(x = speed, y = dist))+
geom_point(col = "red", size = 3)+
theme_dark()
ggplot(cars, aes(x = speed, y = dist))+
geom_point(col = "red", size = 3)+
theme_replace()
ggplot(cars, aes(x = speed, y = dist))+
geom_point(col = "red", size = 3)+
theme_minimal()
ggplot(cars, aes(x = speed, y = dist))+
geom_point(col = "red", size = 3)+
theme_bw()
ggplot(cars, aes(x = speed, y = dist))+
geom_point(col = "red", size = 3)+
theme_bw()+
labs(title = "Meu Gráfico no R", caption = "romulofreits")
ggplot(cars, aes(x = speed, y = dist))+
geom_point(col = "red", size = 3)+
theme_bw()+
labs(title = "Meu Gráfico no R", caption = "@romulofreits")
# Título
## Subtítulo
# Título
## Subtítulo
### Sub-subtítulo
pam.idosos <- rnorm(100, mean=110, sd=25)
t.teste(pam.idosos, mu=100)
install.packages('ISwR')
library(ISwR)
library('ISwR')
t.teste(pam.idosos, mu=100)
> t.teste(pam.idosos, mu=100)
t.teste(pam.idosos, mu=100)
t.test(pam.idosos, mu=100)
One Sample t-test
t.test(pam.idosos, mu=100)
(mean(pam.idosos)-100)/sqrt(var(pam.idosos)/100)
qt(0.025, df=99)
qt(0.025, df=99, lower.tail=F)
t.test(pam.idosos, mu=106)
pt(2.7646, df=99, lower.tail=F)
######### Poder do teste #########
x <- seq(100,120,1)
poder <- pnorm(qnorm(0.975, mean=100, sd=2.5), mean=x, sd=2.5,
lower.tail=F)
plot(x,poder, type="l")
poder1 <- pnorm(qnorm(0.025)+abs((100-x))/2.5)
points(x,poder1)
x <- c(12, 2, 10, 8, 4, 6, 0)
summary(x)
var(x)
y <- c(2 , 5, 8, 3, 6 , 5, 8, 7, 6, 10)
summary(y)
var(y)
z <- c(0, 0, 0, 2, 2, 2, 4, 4, 6, 10)
var(z)
sd(z)
amostra <- c(4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8,
9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 12,
13, 13,14, 15, 15, 15, 16, 16, 18, 23)
summary(amostra)
sum(amostra)
var(amostra)
install.packages('jsonlite')
library(jsonlite)
library('jsonlite')
install.packages('rvest')
library(rvest)
library('rvest')
html <- read_html('http://globoesporte.globo.com/futebol/brasileirao-serie-a/')
View(html)
html.table <- html %>% html_nodes("table")
dados <- html.table[[1]] %>% html_table()
html.table <- html %>% html_nodes("table")
n = 10
n = 10
eqm1 = 1/n
mu = -10:10
eqm2 = (10 - mu)^2
tab = cbind(eqm1/eqm2);tab
f = eqm1/eqm2
plot(eqm1)
lines(eqm2)
plot(mu, eqm2, type = 'l')
plot(mu, f, type = 'l')
lines(eqm1)
plot(mu, eqm2, type = 'l')
lines(eqm1)
n = 1:10
eqm1 = 1/n
mu = 1:10
eqm2 = (10 - mu)^2
f = eqm1/eqm2
tab = cbind(eqm1/eqm2);tab
plot(mu, f, type = 'l', col = 'blue')
plot(n, f, type = 'l', col = 'blue')
plot(n, f, type = 'l', col = 'blue')
plot(n, eqm1, type = 'l', col = 'blue')
lines(mu, eqm2, type = 'l', col = 'red')
n = 200
sx = 300
xb = sx/n;xb
sx2 = 3754 # Somatório de Xi^2
num = sx2-n*xb^2; num
s2 = num/(n-1);s2
s = sqrt(s2);s
sigma2_est = num/n; sigma2_est
sigma_est = sqrt(sigma2_est)
sigma_est = sqrt(sigma2_est); sigma_est
n = 1:10
eqm1 = 1/n
mu = 1:10
eqm2 = (10 - mu)^2
f = eqm1/eqm2
tab = cbind(eqm1/eqm2);tab
plot(n, eqm1, type = 'l', col = 'blue')
lines(mu, eqm2, type = 'l', col = 'red')
n = 1:10
eqm1 = 1/n
mu = 1:10
eqm2 = (10 - mu)^2
#f = eqm1/eqm2
tab = cbind(eqm1/eqm2);tab
plot(n, eqm1, type = 'l', col = 'blue')
lines(mu, eqm2, type = 'l', col = 'red')
plot(n, eqm1, type = 'l', col = 'blue')
lines(mu, eqm2, type = 'l', col = 'red')
g = function(x) exp(-(x+x^2))
I1 = integrate(g, 0, Inf)$value;I1
x <- rnorm(5);x
y <- rnorm(x);y
plot(x, y)
ls()
rm(x, y) # Remove os objetos que não são mais necessários
ls() # Verifica os objetos existentes na área de trabalho
# criando um vetor com uma sequ^encia de números de 1 a 20
x <- 1:20
# criando um vetor com uma sequ^encia de números de 1 a 20
x <- 1:20;x
# criando um vetor com uma sequ^encia de números de 1 a 20
x <- 0:20;x
# criando um vetor com uma sequ^encia de números de 1 a 20
x <- 1:20;x
# um vetor de pesos com os desvios padrões de cada observação
w <- 1 + sqrt(x)/2;w
dummy <- data.frame(x=x, y= x + rnorm(x)*w);dummy
# Ajustando uma regressão linear simples de y em x e examinando os resultados
fm <- lm(y ~ x, data=dummy)
summary(fm)
# como n´os sabemos os pesos podemos fazer uma regress~ao ponderada
fm1 <- lm(y ~ x, data=dummy, weight=1/w^2)
summary(fm1)
# tornando vis´ıveis as colunas do data-frame
attach(dummy)
# tornando vis´ıveis as colunas do data-frame
attach(dummy)
# fazendo uma regressão local não-paramétrica, e visualizando o resultado
lrf <- lowess(x, y)
plot(x, y)
lines(lrf
lines(lrf)
lrf <- lowess(x, y)
plot(x, y)
lines(lrf)
# Alguns gráficos gerados pelas funções counter e image
x <- seq(-pi, pi, len=50);x
y <- x
y <- x;y
f <- outer(x, y, function(x, y) cos(y)/(1 + x^2))
f <- outer(x, y, function(x, y) cos(y)/(1 + x^2));f
# gravando parâmetros gráficos e definindo a região gráfica como quadrada
oldpar <- par(no.readonly = TRUE)
# gravando parâmetros gráficos e definindo a região gráfica como quadrada
oldpar <- par(no.readonly = TRUE);oldpar
par(pty="s")
# fazendo um mapa de contorno de f e depois adicionando mais linhas para maiores detalhes
contour(x, y, f)
contour(x, y, f, nlevels=15, add=TRUE)
x <- c(0,1,1,2,3,3,4,5,5,6)
y <- c(3,2,3,5,4,4,7,6,7,9)
nx <- length(x)
nx <- length(x);nx
ny <- length(y);ny
plot(x, y)
sx <- sum(x)
sy <- sum(y)
sx <- sum(x);sx
sy <- sum(y);sy
sx2 <- sum(x^2);sx2
sy2 <- sum(y^2);sy2
sx <- sum(x);sx
sx2 <- sum(x^2);sx2
sy <- sum(y);sy
sy2 <- sum(y^2);sy2
sx <- sum(x);sx
sx2 <- sum(x^2);sx2
sy <- sum(y);sy
sy2 <- sum(y^2);sy2
sxy <- sum(x*y);sxy # somatório de x*y
xb <- mean(x);xb # média de x
yb <- mean(y);yb # média de y
i = 1:n
i = 1:n;i
tab <- cbind(1, x, y, xy, x2, y2, xy, x2, y2)
xy <- xy
i = 1:n
tab <- cbind(1, x, y, xy, x2, y2, xy, x2, y2)
xy <- x*y
i = 1:n
tab <- cbind(1, x, y, xy, x2, y2, xy, x2, y2)
x2 <- x^2
y2 <- y^2
i = 1:n
tab <- cbind(1, x, y, xy, x2, y2, xy, x2, y2)
tab
tab <- cbind(1, x, y, xy, x2, y2)
tab
sx <- sum(x);sx # somatório de x
sy <- sum(y);sy # somatório de y
sxy <- sum(x*y);sxy # somatório de x*y
A <- matrix(c(n,SX,SX,SX2),ncol=2));A
# Máquina A
ma = C(145, 127, 136, 142, 141, 137)
mb = c(143, 128, 132, 138, 142, 132)
# Máquina A
ma = c(145, 127, 136, 142, 141, 137)
mb = c(143, 128, 132, 138, 142, 132)
na = length(a)
na = length(ma)
# Máquina B
mb = c(143, 128, 132, 138, 142, 132)
nb = length(nb)
nb = length(mb)
na = length(ma);na
# Máquina B
mb = c(143, 128, 132, 138, 142, 132)
nb = length(mb);nb
var_ma = var(ma);var_ma
var_mb = var(mb);var_mb
fcalc = var_ma/var_mb
fcalc = var_ma/var_mb;fcalc
p_valor = 2*pf(fcalc, na-1, nb-1, lower=F)
p_valor = 2*pf(fcalc, na-1, nb-1, lower=F);p_valor
hist(ma)
pie(ma)
var.test(ma,mb)
# No teste do P-valor multiplicamos o valor encontrado por 2 porque estamos realizando um teste bilateral
p_valor = 2*pf(fcalc, na-1, nb-1, lower=F);p_valor
var.test(ma,mb)
x_1 = 58
x_2 = 33
x_3 = 9
x_1 = 58
x_2 = 33
x_3 = 9
n = x_1 + x_2 + x_3;n # tamanho da amostra
a = x_1 + x_2 + x_3;n # tamanho da amostra
b = -2*x_2 + x_3 - x_1;b
b = (-2*x_2) + (x_3 - x_1;b)
b = (-2*x_2) + (x_3 - x_1);b
# Create data
data <- data.frame( var1 = 1:100 + rnorm(100,sd=20), v2 = 1:100 + rnorm(100,sd=27), v3 = rep(1, 100) + rnorm(100, sd = 1))
data$v4 = data$var1 ** 2
data$v5 = -(data$var1 ** 2)
# Check correlations (as scatterplots), distribution and print corrleation coefficient
ggpairs(data, title="correlogram with ggpairs()")
# Create data
data <- data.frame( var1 = 1:100 + rnorm(100,sd=20), v2 = 1:100 + rnorm(100,sd=27), v3 = rep(1, 100) + rnorm(100, sd = 1))
data$v4 = data$var1 ** 2
data$v5 = -(data$var1 ** 2)
# Check correlations (as scatterplots), distribution and print corrleation coefficient
ggpairs(data, title="correlogram with ggpairs()")
install.packages('GGally')
# Check correlations (as scatterplots), distribution and print corrleation coefficient
ggpairs(data, title="correlogram with ggpairs()")
View(data)
# Load ggplot2
library(ggplot2)
# A really basic boxplot.
ggplot(mtcars, aes(x=as.factor(cyl), y=mpg)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("cyl")
pacman::p_load(ggplot2, dplyr)
pacman::p_load(ggplot2, dplyr)
setwd("C:/Users/victo/Desktop/2023.1/Análise Espacial/Trabalho 01")
# Carregamento do banco de dados
dados = read.csv('Bairros_Fortaleza.csv')
View(dados)
# Carregamento do banco de dados
base_dados = read.csv('Bairros_Fortaleza.csv')
View(base_dados)
glimpse(base_dados)
pie(base_dados$IDHB2010.Classificação)
hist(base_dados$IDHB2010.Classificação)
barplot(base_dados$IDHB2010.Classificação)
barplot(base_dados$IDHB2010Renda)
barplot(base_dados$Número.de.Cor.Raça.Parda)
boxplot(base_dados$Número.de.Cor.Raça.Parda)
