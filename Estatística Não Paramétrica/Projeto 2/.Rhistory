setwd("C:/Disciplinas Graduacao/Estatística Não Paramétrica/Projeto 2")
library(tidyr)
library(tidyverse)
library(e1071)
library(xtable)
library(ggplot2)
library(ggpubr)
library(nortest)
library(DescTools)
library(fitdistrplus)
dados = read.csv('dados_projeto.csv')
colnames(dados) = c('jogador', 'prop_vitorias')
dados['vitorias'] = round(dados$prop_vitorias*112)
#GRAFICO PARA OS ICS
ggplot(data = dados2, aes(x = Jogador, ymin = IC_Inferior, ymax = IC_Superior,
color = (IC_Inferior >= 0.5 | IC_Superior >= 0.5))) +
geom_linerange(size = 1.5) +  # Aumenta a espessura das linhas
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(x = "Jogador", y = "Intervalo de Confiança") +
theme_bw() +  # Fundo branco
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +  # Remove as linhas de grade
scale_color_manual(values = c("TRUE" = "steelblue", "FALSE" = "tomato")) +
guides(color = FALSE)  # Remove a legenda de cores
dados2 = data.frame(Jogador = 1:n, P_Valor = round(p_valores, 4),
IC_Inferior = round(ic_inf, 4), IC_Superior = round(ic_sup, 4))
#GRAFICO PARA OS ICS
ggplot(data = dados2, aes(x = Jogador, ymin = IC_Inferior, ymax = IC_Superior,
color = (IC_Inferior >= 0.5 | IC_Superior >= 0.5))) +
geom_linerange(size = 1.5) +  # Aumenta a espessura das linhas
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(x = "Jogador", y = "Intervalo de Confiança") +
theme_bw() +  # Fundo branco
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +  # Remove as linhas de grade
scale_color_manual(values = c("TRUE" = "steelblue", "FALSE" = "tomato")) +
guides(color = FALSE)  # Remove a legenda de cores
dados2 = data.frame(Jogador = 1:n, P_Valor = round(p_valores, 4),
IC_Inferior = round(ic_inf, 4), IC_Superior = round(ic_sup, 4))
dados2 = data.frame(Jogador = 1:n, P_Valor = round(p_valores, 4),
IC_Inferior = round(ic_inf, 4), IC_Superior = round(ic_sup, 4))
setwd("C:/Disciplinas Graduacao/Estatística Não Paramétrica/Projeto 2")
library(tidyr)
library(tidyverse)
library(e1071)
library(xtable)
library(ggplot2)
library(ggpubr)
library(nortest)
library(DescTools)
library(fitdistrplus)
dados = read.csv('dados_projeto.csv')
colnames(dados) = c('jogador', 'prop_vitorias')
dados['vitorias'] = round(dados$prop_vitorias*112)
View(dados)
medidas.descritivas_prop = dados %>%
summarise(
media = mean(dados$prop_vitorias),
q1 = quantile(dados$prop_vitorias, probs = 0.25),
q2 = median(dados$prop_vitorias),
q3 = quantile(dados$prop_vitorias, probs = 0.75),
desv.pd = sd(dados$prop_vitorias),
minimo = min(dados$prop_vitorias),
maximo = max(dados$prop_vitorias),
curt = kurtosis(dados$prop_vitorias),
assi = skewness(dados$prop_vitorias)
);medidas.descritivas_prop
medidas.descritivas_vit = dados %>%
summarise(
media = mean(dados$vitorias),
q1 = quantile(dados$vitorias, probs = 0.25),
q2 = median(dados$vitorias),
q3 = quantile(dados$vitorias, probs = 0.75),
desv.pd = sd(dados$vitorias),
minimo = min(dados$vitorias),
maximo = max(dados$vitorias),
curt = kurtosis(dados$vitorias),
assi = skewness(dados$vitorias)
);medidas.descritivas_vit
dados2 = data.frame(Jogador = 1:n, P_Valor = round(p_valores, 4),
IC_Inferior = round(ic_inf, 4), IC_Superior = round(ic_sup, 4))
# Teste Binomial:
p_valores = c()
n = length(dados$vitorias)
ic_inf = c()
ic_sup = c()
for (i in 1:n) {
teste = binom.test(dados$vitorias[i], 112, alternative = 'two.sided',
conf.level = 0.95)
p_valores[i] = teste$p.value
ic_inf[i] = teste$conf.int[1]
ic_sup[i] = teste$conf.int[2]
}
dados2 = data.frame(Jogador = 1:n, P_Valor = round(p_valores, 4),
IC_Inferior = round(ic_inf, 4), IC_Superior = round(ic_sup, 4))
#GRAFICO PARA OS ICS
ggplot(data = dados2, aes(x = Jogador, ymin = IC_Inferior, ymax = IC_Superior,
color = (IC_Inferior >= 0.5 | IC_Superior >= 0.5))) +
geom_linerange(size = 1.5) +  # Aumenta a espessura das linhas
geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
labs(x = "Jogador", y = "Intervalo de Confiança") +
theme_bw() +  # Fundo branco
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +  # Remove as linhas de grade
scale_color_manual(values = c("TRUE" = "steelblue", "FALSE" = "tomato")) +
guides(color = FALSE)  # Remove a legenda de cores
wilcox.test(dados$prop_vitorias, mu = 0.5, alternative = "two.sided",
exact = TRUE, correct = FALSE, conf.int = TRUE)
wilcox.test(dados$prop_vitorias, mu = 0.5, alternative = 'greater',
exact = FALSE, correct = FALSE, conf.int = TRUE)
t.test(dados$prop_vitorias, mu = 0.5, alternative = 'two.sided',
conf.level = 0.95)
t.test(dados$prop_vitorias, mu = 0.5, alternative = 'greater',
conf.level = 0.95)
